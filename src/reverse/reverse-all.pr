/* Author: Robert Staerk <staerk@math.stanford.edu> */
/* Date: 5/26/95, 8:09 PM */
/* Filename: reverse.pr */

:- initialize.

:- tex_file($(lib)/reverse/reverse).
:- thm_file($(lib)/list/reverse).

:- needs_gr($(lib)/list/reverse).
:- needs_gr($(lib)/list/list).
:- needs_gr($(lib)/permutation/permutation).

:- needs_thm($(lib)/list/list).
:- needs_thm($(lib)/permutation/permutation).

:- axiom(app:associative, all[l1,l2,l3]:succeeds list(?l1)&succeeds list(?l2)=> ?l1** ?l2** ?l3= ?l1**(?l2** ?l3)).
:- axiom(app:cons, all[x,l1,l2]:succeeds list(?l1)=>[?x|?l1]** ?l2=[?x|?l1** ?l2]).
:- axiom(app:ground:1, all[l1,l2]:succeeds list(?l1)&gr(?l1)&gr(?l2)=>gr(?l1** ?l2)).
:- axiom(app:ground:2, all[l1,l2]:succeeds list(?l1)&gr(?l1** ?l2)=>gr(?l1)&gr(?l2)).
:- axiom(app:lh, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>lh(?l1** ?l2)=lh(?l1)@+lh(?l2)).
:- axiom(app:lh:leq:first, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>succeeds lh(?l1)@=<lh(?l1** ?l2)).
:- axiom(app:lh:leq:second, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>succeeds lh(?l2)@=<lh(?l1** ?l2)).
:- axiom(app:member:1, all[x,l1,l2]:succeeds member(?x,?l1)&succeeds list(?l1)=>succeeds member(?x,?l1** ?l2)).
:- axiom(app:member:2, all[x,l1,l2]:succeeds member(?x,?l2)&succeeds list(?l1)=>succeeds member(?x,?l1** ?l2)).
:- axiom(app:member:3, all[x,l1,l2]:succeeds list(?l1)&succeeds member(?x,?l1** ?l2)=>succeeds member(?x,?l1)\/succeeds member(?x,?l2)).
:- axiom(app:nil, all l:[]** ?l= ?l).
:- axiom(app:nil, all l:succeeds list(?l)=> ?l**[]= ?l).
:- axiom(app:types:1, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>succeeds list(?l1** ?l2)).
:- axiom(app:types:2, all[l1,l2]:succeeds list(?l1)&succeeds list(?l1** ?l2)=>succeeds list(?l2)).
:- axiom(app:uniqueness:1, all[l1,l2,l3]:succeeds list(?l1)&succeeds list(?l2)&succeeds list(?l3)& ?l1** ?l3= ?l2** ?l3=> ?l1= ?l2).
:- axiom(append:cons:different, all[x,l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=> ?l2<>[?x|?l3]).
:- axiom(append:equal:nil, all[l1,l2]:succeeds append(?l1,?l2,?l2)&succeeds list(?l2)=> ?l1=[]).
:- axiom(append:existence, all[l1,l2]:succeeds list(?l1)=>(ex l3:succeeds append(?l1,?l2,?l3))).
:- axiom(append:ground:1, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&gr(?l1)&gr(?l2)=>gr(?l3)).
:- axiom(append:ground:2, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&gr(?l3)=>gr(?l1)&gr(?l2)).
:- axiom(append:lh, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=>lh(?l1)@+lh(?l2)=lh(?l3)).
:- axiom(append:lh:leq:first, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=>succeeds lh(?l1)@=<lh(?l3)).
:- axiom(append:lh:leq:second, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=>succeeds lh(?l2)@=<lh(?l3)).
:- axiom(append:member, all[x,l1,l2,l3]:succeeds append(?l1,[?x|?l2],?l3)=>succeeds member(?x,?l3)).
:- axiom(append:member:1, all[x,l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds member(?x,?l1)=>succeeds member(?x,?l3)).
:- axiom(append:member:2, all[x,l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds member(?x,?l2)=>succeeds member(?x,?l3)).
:- axiom(append:member:3, all[x,l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds member(?x,?l3)=>succeeds member(?x,?l1)\/succeeds member(?x,?l2)).
:- axiom(append:termination:1, all[l1,l2,l3]:succeeds list(?l1)=>terminates append(?l1,?l2,?l3)).
:- axiom(append:termination:2, all[l1,l2,l3]:succeeds list(?l3)=>terminates append(?l1,?l2,?l3)).
:- axiom(append:types:1, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)=>succeeds list(?l1)).
:- axiom(append:types:2, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l2)=>succeeds list(?l3)).
:- axiom(append:types:3, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=>succeeds list(?l2)).
:- axiom(append:types:4, all[l1,l2,l3]:succeeds append(?l1,?l2,?l3)&succeeds list(?l3)=>succeeds list(?l1)&succeeds list(?l2)).
:- axiom(append:uniqueness, all[l1,l2,l3,l4]:succeeds append(?l1,?l2,?l3)&succeeds append(?l1,?l2,?l4)=> ?l3= ?l4).
:- axiom(append:uniqueness:1, all[l1,l2,l3,l4]:succeeds append(?l1,?l2,?l3)&succeeds append(?l4,?l2,?l3)&succeeds list(?l3)=> ?l1= ?l4).
:- axiom(append:uniqueness:2, all[l1,l2,l3,l4]:succeeds append(?l1,?l2,?l3)&succeeds append(?l1,?l4,?l3)=> ?l2= ?l4).
:- axiom(delete:app:1, all[x,l1,l2]:succeeds list(?l1)=>succeeds delete(?x,?l1**[?x|?l2],?l1** ?l2)).
:- axiom(delete:app:2, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)=>(ex[l3,l4]:succeeds list(?l3)& ?l1= ?l3**[?x|?l4]& ?l2= ?l3** ?l4)).
:- axiom(delete:ground, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)&gr(?l1)=>gr(?x)&gr(?l2)).
:- axiom(delete:length, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds list(?l1)=>lh(?l1)=s(lh(?l2))).
:- axiom(delete:member:1, all[x,y,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds member(?y,?l1)=>succeeds member(?y,?l2)\/ ?y= ?x).
:- axiom(delete:member:2, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)=>succeeds member(?x,?l1)).
:- axiom(delete:member:3, all[x,y,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds member(?y,?l2)=>succeeds member(?y,?l1)).
:- axiom(delete:member:different, all[x,y,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds member(?y,?l1)& ?x<> ?y=>succeeds member(?y,?l2)).
:- axiom(delete:member:existence, all[x,l1]:succeeds member(?x,?l1)=>(ex l2:succeeds delete(?x,?l1,?l2))).
:- axiom(delete:nat_list, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds nat_list(?l1)=>succeeds nat(?x)&succeeds nat_list(?l2)).
:- axiom(delete:occ:diff, all[x,y,l1,l2]:succeeds list(?l1)&succeeds delete(?x,?l1,?l2)& ?x<> ?y=>occ(?y,?l1)=occ(?y,?l2)).
:- axiom(delete:occ:eq, all[x,l1,l2]:succeeds list(?l1)&succeeds delete(?x,?l1,?l2)=>occ(?x,?l1)=s(occ(?x,?l2))).
:- axiom(delete:termination:1, all[x,l1,l2]:succeeds list(?l1)=>terminates delete(?x,?l1,?l2)).
:- axiom(delete:termination:2, all[x,l1,l2]:succeeds list(?l2)=>terminates delete(?x,?l1,?l2)).
:- axiom(delete:types:1, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds list(?l1)=>succeeds list(?l2)).
:- axiom(delete:types:2, all[x,l1,l2]:succeeds delete(?x,?l1,?l2)&succeeds list(?l2)=>succeeds list(?l1)).
:- axiom(length:existence, all l:succeeds list(?l)=>(ex n:succeeds length(?l,?n))).
:- axiom(length:ground, all[l,n]:succeeds length(?l,?n)=>gr(?n)).
:- axiom(length:termination, all[l,n]:succeeds list(?l)=>terminates length(?l,?n)).
:- axiom(length:types, all[l,n]:succeeds length(?l,?n)=>succeeds list(?l)&succeeds nat(?n)).
:- axiom(length:uniqueness, all[l,m,n]:succeeds length(?l,?m)&succeeds length(?l,?n)=> ?m= ?n).
:- axiom(leq:antisymmetric, all[x,y]:succeeds?x@=< ?y&succeeds?y@=< ?x=> ?x= ?y).
:- axiom(leq:failure, all[x,y]:succeeds nat(?x)&succeeds nat(?y)&fails?x@=< ?y=>succeeds?y@=< ?x).
:- axiom(leq:less, all[x,y]:succeeds?x@=< ?y&succeeds nat(?y)=>succeeds?x@< ?y\/ ?x= ?y).
:- axiom(leq:less:transitive, all[x,y,z]:succeeds?x@=< ?y&succeeds?y@< ?z=>succeeds?x@< ?z).
:- axiom(leq:one:failure, all x:succeeds nat(?x)=>fails s(?x)@=< ?x).
:- axiom(leq:one:success, all x:succeeds nat(?x)=>succeeds?x@=<s(?x)).
:- axiom(leq:plus, all[x,y]:succeeds?x@=< ?y=>(ex z: ?x@+ ?z= ?y)).
:- axiom(leq:plus, all[x,y]:succeeds?x@=< ?y=>(ex z:succeeds plus(?x,?z,?y))).
:- axiom(leq:plus:first, all[x,y,z]:succeeds?x@=< ?y&succeeds nat(?y)&succeeds nat(?z)=>succeeds?x@+ ?z@=< ?y@+ ?z).
:- axiom(leq:plus:first, all[x,y]:succeeds nat(?x)=>succeeds?x@=< ?x@+ ?y).
:- axiom(leq:plus:inverse, all[x,y,z]:succeeds nat(?x)&succeeds?x@+ ?y@=< ?x@+ ?z=>succeeds?y@=< ?z).
:- axiom(leq:plus:second, all[x,y,z]:succeeds nat(?x)&succeeds?y@=< ?z=>succeeds?x@+ ?y@=< ?x@+ ?z).
:- axiom(leq:plus:second, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds?y@=< ?x@+ ?y).
:- axiom(leq:reflexive, all x:succeeds nat(?x)=>succeeds?x@=< ?x).
:- axiom(leq:termination:1, all[x,y]:succeeds nat(?x)=>terminates?x@=< ?y).
:- axiom(leq:termination:2, all[x,y]:succeeds nat(?y)=>terminates?x@=< ?y).
:- axiom(leq:times:inverse, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)&succeeds s(?x)@* ?y@=<s(?x)@* ?z=>succeeds?y@=< ?z).
:- axiom(leq:totality, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds?x@=< ?y\/succeeds?y@=< ?x).
:- axiom(leq:transitive, all[x,y,z]:succeeds?x@=< ?y&succeeds?y@=< ?z=>succeeds?x@=< ?z).
:- axiom(leq:types, all[x,y]:succeeds?x@=< ?y=>succeeds nat(?x)).
:- axiom(less:axiom:successor, all[x,y]:succeeds nat(?y)&succeeds?x@<s(?y)=>succeeds?x@< ?y\/ ?x= ?y).
:- axiom(less:different:zero, all x:succeeds nat(?x)& ?x<>0=>succeeds 0@< ?x).
:- axiom(less:failure, all x:succeeds nat(?x)=>fails?x@< ?x).
:- axiom(less:leq, all[x,y]:succeeds?x@< ?y=>succeeds?x@=< ?y).
:- axiom(less:leq:total, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds?x@< ?y\/succeeds?y@=< ?x).
:- axiom(less:leq:transitive, all[x,y,z]:succeeds?x@< ?y&succeeds?y@=< ?z=>succeeds?x@< ?z).
:- axiom(less:one, all x:succeeds nat(?x)=>succeeds?x@<s(?x)).
:- axiom(less:plus, all[x,y]:succeeds?x@< ?y=>(ex z: ?x@+s(?z)= ?y)).
:- axiom(less:plus, all[x,y]:succeeds?x@< ?y=>(ex z:succeeds plus(?x,s(?z),?y))).
:- axiom(less:plus:first, all[x,y,z]:succeeds?x@< ?y&succeeds nat(?y)&succeeds nat(?z)=>succeeds?x@+ ?z@< ?y@+ ?z).
:- axiom(less:plus:first, all[x,y]:succeeds 0@< ?y&succeeds nat(?x)&succeeds nat(?y)=>succeeds?x@< ?y@+ ?x).
:- axiom(less:plus:inverse, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)&succeeds?x@+ ?z@< ?y@+ ?z=>succeeds?x@< ?y).
:- axiom(less:plus:inverse, all[x,y,z]:succeeds nat(?x)&succeeds?x@+ ?y@< ?x@+ ?z=>succeeds?y@< ?z).
:- axiom(less:plus:second, all[x,y,z]:succeeds nat(?x)&succeeds?y@< ?z=>succeeds?x@+ ?y@< ?x@+ ?z).
:- axiom(less:plus:second, all[x,y]:succeeds nat(?x)=>succeeds?x@< ?x@+s(?y)).
:- axiom(less:strictness, all x:succeeds nat(?x)=> ~succeeds?x@< ?x).
:- axiom(less:successor, all[x,y]:succeeds?x@< ?y=>(ex z: ?y=s(?z))).
:- axiom(less:termination:1, all[x,y]:succeeds nat(?x)=>terminates?x@< ?y).
:- axiom(less:termination:2, all[x,y]:succeeds nat(?y)=>terminates?x@< ?y).
:- axiom(less:totality, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds?x@< ?y\/ ?x= ?y\/succeeds?y@< ?x).
:- axiom(less:transitive, all[x,y,z]:succeeds?x@< ?y&succeeds?y@< ?z=>succeeds?x@< ?z).
:- axiom(less:transitive:successor, all[x,y,z]:succeeds?x@< ?y&succeeds?y@<s(?z)=>succeeds?x@< ?z).
:- axiom(less:types, all[x,y]:succeeds?x@< ?y=>succeeds nat(?x)).
:- axiom(less:weakening, all[x,y]:succeeds?x@< ?y=>succeeds?x@<s(?y)).
:- axiom(lh:cons, all[x,l]:succeeds list(?l)=>lh([?x|?l])=s(lh(?l))).
:- axiom(lh:cons:first, all[x,l1,l2,n]:succeeds list(?l1)&succeeds list(?l2)&succeeds lh([?x|?l1])@+lh(?l2)@<s(?n)=>succeeds lh(?l1)@+lh(?l2)@< ?n).
:- axiom(lh:cons:leq, all[x,l]:succeeds list(?l)=>succeeds lh(?l)@=<lh([?x|?l])).
:- axiom(lh:cons:second, all[l1,y,l2,n]:succeeds list(?l1)&succeeds list(?l2)&succeeds lh(?l1)@+lh([?y|?l2])@<s(?n)=>succeeds lh(?l1)@+lh(?l2)@< ?n).
:- axiom(lh:nil, lh([])=0).
:- axiom(lh:successor, all[n,l1]:succeeds list(?l1)&lh(?l1)=s(?n)=>(ex[x,l2]: ?l1=[?x|?l2])).
:- axiom(lh:types, all l:succeeds list(?l)=>succeeds nat(lh(?l))).
:- axiom(lh:zero, all l:succeeds list(?l)&lh(?l)=0=> ?l=[]).
:- axiom(list:1, all x:succeeds list([?x])).
:- axiom(list:2, all[x,y]:succeeds list([?x,?y])).
:- axiom(list:3, all[x,y,z]:succeeds list([?x,?y,?z])).
:- axiom(list:cons, all[x,l]:succeeds list([?x|?l])=>succeeds list(?l)).
:- axiom(list:termination, all l:succeeds list(?l)=>terminates list(?l)).
:- axiom(member2:ground, all[x,l1,l2]:succeeds member2(?x,?l1,?l2)&gr(?l1)&gr(?l2)=>gr(?x)).
:- axiom(member2:termination, all[x,l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>terminates member2(?x,?l1,?l2)).
:- axiom(member:append, all[x,l3]:succeeds member(?x,?l3)=>(ex[l1,l2]:succeeds append(?l1,[?x|?l2],?l3))).
:- axiom(member:cons, all[x,y,z,l]:succeeds member(?x,[?y|?l])& ?x<> ?y=>succeeds member(?x,?l)).
:- axiom(member:ground, all[x,l]:succeeds member(?x,?l)&gr(?l)=>gr(?x)).
:- axiom(member:occ:success, all[x,l]:succeeds list(?l)&succeeds member(?x,?l)=>(ex n:occ(?x,?l)=s(?n))).
:- axiom(member:termination, all[x,l]:succeeds list(?l)=>succeeds member(?x,?l)\/fails member(?x,?l)).
:- axiom(member:termination, all[x,l]:succeeds list(?l)=>terminates member(?x,?l)).
:- axiom(nat:ground, all x:succeeds nat(?x)=>gr(?x)).
:- axiom(nat:termination, all x:succeeds nat(?x)=>terminates nat(?x)).
:- axiom(nat_list:ground, all x:succeeds nat_list(?x)=>gr(?x)).
:- axiom(nat_list:list, all l:succeeds nat_list(?l)=>succeeds list(?l)).
:- axiom(nat_list:termination, all l:succeeds nat_list(?l)=>terminates nat_list(?l)).
:- axiom(not_same_occ:termination, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)&gr(?l1)&gr(?l2)=>terminates not_same_occ(?l1,?l2)).
:- axiom(occ:app, all[x,l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>occ(?x,?l1** ?l2)=occ(?x,?l1)@+occ(?x,?l2)).
:- axiom(occ:cons:diff, all[x,y,l]:succeeds list(?l)& ?x<> ?y=>occ(?x,[?y|?l])=occ(?x,?l)).
:- axiom(occ:cons:eq, all[x,l]:succeeds list(?l)=>occ(?x,[?x|?l])=s(occ(?x,?l))).
:- axiom(occ:existence, all[x,l]:succeeds list(?l)=>(ex n:succeeds occ(?x,?l,?n))).
:- axiom(occ:ground, all[x,l,n]:succeeds occ(?x,?l,?n)=>gr(?n)).
:- axiom(occ:member, all[x,l]:succeeds list(?l)&fails member(?x,?l)=>occ(?x,?l)=0).
:- axiom(occ:member:success, all[x,l,n]:succeeds list(?l)&occ(?x,?l)=s(?n)=>succeeds member(?x,?l)).
:- axiom(occ:member:success, all[x,l,n]:succeeds list(?l)&succeeds occ(?x,?l,s(?n))=>succeeds member(?x,?l)).
:- axiom(occ:nil, all x:occ(?x,[])=0).
:- axiom(occ:permutation, all[l1,l2]:succeeds list(?l2)&succeeds list(?l1)&(all x:occ(?x,?l1)=occ(?x,?l2))=>succeeds permutation(?l1,?l2)).
:- axiom(occ:successor, all[x,l1,n]:succeeds list(?l1)&occ(?x,?l1)=s(?n)=>(ex l2:succeeds delete(?x,?l1,?l2))).
:- axiom(occ:termination, all[x,l,n]:succeeds list(?l)&gr(?l)&gr(?x)=>terminates occ(?x,?l,?n)).
:- axiom(occ:types, all[x,l,n]:succeeds occ(?x,?l,?n)=>succeeds list(?l)&succeeds nat(?n)).
:- axiom(occ:types, all[x,l]:succeeds list(?l)=>succeeds nat(occ(?x,?l))).
:- axiom(occ:uniqueness, all[x,l,m,n]:succeeds occ(?x,?l,?m)&succeeds occ(?x,?l,?n)=> ?m= ?n).
:- axiom(occ:zero, all l:succeeds list(?l)&(all x:occ(?x,?l)=0)=> ?l=[]).
:- axiom(permutation:app, all[l1,l2,l3,l4]:succeeds permutation(?l1,?l3)&succeeds permutation(?l2,?l4)=>succeeds permutation(?l1** ?l2,?l3** ?l4)).
:- axiom(permutation:app:commutative, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)=>succeeds permutation(?l1** ?l2,?l2** ?l1)).
:- axiom(permutation:completeness, all l2:succeeds list(?l2)=>(all l1:succeeds list(?l1)&(all x:occ(?x,?l1)=occ(?x,?l2))=>succeeds permutation(?l1,?l2))).
:- axiom(permutation:completeness, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)&succeeds same_occ(?l1,?l2)=>succeeds permutation(?l1,?l2)).
:- axiom(permutation:cons, all[x,l1,l2]:succeeds permutation([?x|?l1],[?x|?l2])=>succeeds permutation(?l1,?l2)).
:- axiom(permutation:ground, all[l1,l2]:succeeds permutation(?l1,?l2)&gr(?l1)=>gr(?l2)).
:- axiom(permutation:length, all[l1,l2]:succeeds permutation(?l1,?l2)=>lh(?l1)=lh(?l2)).
:- axiom(permutation:member, all[x,l1,l2]:succeeds permutation(?l1,?l2)&succeeds member(?x,?l1)=>succeeds member(?x,?l2)).
:- axiom(permutation:nat_list, all[l1,l2]:succeeds permutation(?l1,?l2)&succeeds nat_list(?l1)=>succeeds nat_list(?l2)).
:- axiom(permutation:nil, all l:succeeds permutation([],?l)=> ?l=[]).
:- axiom(permutation:occ, all[l1,l2]:succeeds permutation(?l1,?l2)=>(all x:occ(?x,?l1)=occ(?x,?l2))).
:- axiom(permutation:reflexive, all l:succeeds list(?l)=>succeeds permutation(?l,?l)).
:- axiom(permutation:soundness, all[l1,l2]:succeeds permutation(?l1,?l2)&gr(?l1)&gr(?l2)=>succeeds same_occ(?l1,?l2)).
:- axiom(permutation:symmetric, all[l1,l2]:succeeds permutation(?l1,?l2)=>succeeds permutation(?l2,?l1)).
:- axiom(permutation:termination, all[l1,l2]:succeeds list(?l1)=>terminates permutation(?l1,?l2)).
:- axiom(permutation:termination, all[n,l1,l2]:succeeds nat(?n)&succeeds list(?l1)&lh(?l1)= ?n=>terminates permutation(?l1,?l2)).
:- axiom(permutation:transitive, all[l1,l2,l3]:succeeds permutation(?l1,?l2)&succeeds permutation(?l2,?l3)=>succeeds permutation(?l1,?l3)).
:- axiom(permutation:types, all[l1,l2]:succeeds permutation(?l1,?l2)=>succeeds list(?l1)&succeeds list(?l2)).
:- axiom(plus:associative, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)=> ?x@+ ?y@+ ?z= ?x@+(?y@+ ?z)).
:- axiom(plus:commutative, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=> ?x@+ ?y= ?y@+ ?x).
:- axiom(plus:existence, all[x,y]:succeeds nat(?x)=>(ex z:succeeds plus(?x,?y,?z))).
:- axiom(plus:ground:1, all[x,y,z]:succeeds plus(?x,?y,?z)=>gr(?x)).
:- axiom(plus:ground:2, all[x,y,z]:succeeds plus(?x,?y,?z)&gr(?y)=>gr(?z)).
:- axiom(plus:ground:3, all[x,y,z]:succeeds plus(?x,?y,?z)&gr(?z)=>gr(?y)).
:- axiom(plus:injective:first, all[x1,x2,y]:succeeds nat(?x1)&succeeds nat(?x2)&succeeds nat(?y)& ?x1@+ ?y= ?x2@+ ?y=> ?x1= ?x2).
:- axiom(plus:injective:second, all[x,y,z]:succeeds nat(?x)& ?x@+ ?y= ?x@+ ?z=> ?y= ?z).
:- axiom(plus:leq:leq, all[x1,x2,y1,y2]:succeeds?x1@=< ?y1&succeeds?x2@=< ?y2&succeeds nat(?y1)=>succeeds?x1@+ ?x2@=< ?y1@+ ?y2).
:- axiom(plus:leq:less, all[x1,x2,y1,y2]:succeeds?x1@=< ?y1&succeeds?x2@< ?y2&succeeds nat(?y1)=>succeeds?x1@+ ?x2@< ?y1@+ ?y2).
:- axiom(plus:less:leq, all[x1,x2,y1,y2]:succeeds?x1@< ?y1&succeeds?x2@=< ?y2&succeeds nat(?y1)=>succeeds?x1@+ ?x2@< ?y1@+ ?y2).
:- axiom(plus:less:less, all[x1,x2,y1,y2]:succeeds?x1@< ?y1&succeeds?x2@< ?y2&succeeds nat(?y1)=>succeeds?x1@+ ?x2@< ?y1@+ ?y2).
:- axiom(plus:successor, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=> ?x@+s(?y)=s(?x)@+ ?y).
:- axiom(plus:successor, all[x,y]:succeeds nat(?x)=>s(?x)@+ ?y=s(?x@+ ?y)).
:- axiom(plus:termination:1, all[x,y,z]:succeeds nat(?x)=>terminates plus(?x,?y,?z)).
:- axiom(plus:termination:2, all[x,y,z]:succeeds nat(?z)=>terminates plus(?x,?y,?z)).
:- axiom(plus:termination:3, all[x,y,z]:succeeds plus(?x,?y,?z)=>terminates plus(?x,?y,?z)).
:- axiom(plus:times:distributive, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)=> ?z@*(?x@+ ?y)= ?z@* ?x@+ ?z@* ?y).
:- axiom(plus:times:distributive, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)=>(?x@+ ?y)@* ?z= ?x@* ?z@+ ?y@* ?z).
:- axiom(plus:types, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds nat(?x@+ ?y)).
:- axiom(plus:types:1, all[x,y,z]:succeeds plus(?x,?y,?z)=>succeeds nat(?x)).
:- axiom(plus:types:2, all[x,y,z]:succeeds plus(?x,?y,?z)&succeeds nat(?y)=>succeeds nat(?z)).
:- axiom(plus:types:3, all[x,y,z]:succeeds plus(?x,?y,?z)&succeeds nat(?z)=>succeeds nat(?y)).
:- axiom(plus:uniqueness, all[x,y,z1,z2]:succeeds plus(?x,?y,?z1)&succeeds plus(?x,?y,?z2)=> ?z1= ?z2).
:- axiom(plus:zero, all x:succeeds nat(?x)=> ?x@+0= ?x).
:- axiom(plus:zero, all y:0@+ ?y= ?y).
:- axiom(same_occ:success, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)&succeeds same_occ(?l1,?l2)=>(all x:occ(?x,?l1)=occ(?x,?l2))).
:- axiom(same_occ:termination, all[l1,l2]:succeeds list(?l1)&succeeds list(?l2)&gr(?l1)&gr(?l2)=>terminates same_occ(?l1,?l2)).
:- axiom(sub:app:1, all[l1,l2]:succeeds list(?l1)=>sub(?l1,?l1** ?l2)).
:- axiom(sub:app:2, all[l1,l2]:succeeds list(?l1)=>sub(?l2,?l1** ?l2)).
:- axiom(sub:cons, all[x,i]:sub(?i,[?x|?i])).
:- axiom(sub:cons:both, all[x,i,j]:sub(?i,?j)=>sub([?x|?i],[?x|?j])).
:- axiom(sub:member, all[x,i,j]:sub(?i,?j)&succeeds member(?x,?j)=>sub([?x|?i],?j)).
:- axiom(sub:nil, all l:sub([],?l)).
:- axiom(sub:reflexive, all l:sub(?l,?l)).
:- axiom(sub:transitive, all[i,j,k]:sub(?i,?j)&sub(?j,?k)=>sub(?i,?k)).
:- axiom(times:associative, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)&succeeds nat(?z)=> ?x@* ?y@* ?z= ?x@*(?y@* ?z)).
:- axiom(times:commutative, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=> ?x@* ?y= ?y@* ?x).
:- axiom(times:existence, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>(ex z:succeeds times(?x,?y,?z))).
:- axiom(times:ground:1, all[x,y,z]:succeeds times(?x,?y,?z)=>gr(?x)).
:- axiom(times:ground:2, all[x,y,z]:succeeds times(?x,?y,?z)&gr(?y)=>gr(?z)).
:- axiom(times:leq:first, all[x,y,z]:succeeds?x@=< ?y&succeeds nat(?y)&succeeds nat(?z)=>succeeds?x@* ?z@=< ?y@* ?z).
:- axiom(times:leq:second, all[x,y,z]:succeeds nat(?x)&succeeds?y@=< ?z&succeeds nat(?z)=>succeeds?x@* ?y@=< ?x@* ?z).
:- axiom(times:less:second, all[x,y,z]:succeeds nat(?x)& ?x<>0&succeeds?y@< ?z&succeeds nat(?z)=>succeeds?x@* ?y@< ?x@* ?z).
:- axiom(times:one, all x:succeeds nat(?x)=> ?x@*s(0)= ?x).
:- axiom(times:one, all x:succeeds nat(?x)=>s(0)@* ?x= ?x).
:- axiom(times:successor, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>s(?x)@* ?y= ?y@+ ?x@* ?y).
:- axiom(times:successor, all[y,x]:succeeds nat(?y)&succeeds nat(?x)=> ?y@* ?x@+ ?y= ?y@*s(?x)).
:- axiom(times:termination, all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)=>terminates times(?x,?y,?z)).
:- axiom(times:types, all[x,y]:succeeds nat(?x)&succeeds nat(?y)=>succeeds nat(?x@* ?y)).
:- axiom(times:types:1, all[x,y,z]:succeeds times(?x,?y,?z)=>succeeds nat(?x)).
:- axiom(times:types:2, all[x,y,z]:succeeds times(?x,?y,?z)&succeeds nat(?y)=>succeeds nat(?z)).
:- axiom(times:uniqueness, all[x,y,z1,z2]:succeeds times(?x,?y,?z1)&succeeds times(?x,?y,?z2)=> ?z1= ?z2).
:- axiom(times:zero, all x:succeeds nat(?x)=> ?x@*0=0).
:- axiom(times:zero, all y:succeeds nat(?y)=>0@* ?y=0).
:- definition_pred(**, 2,all[l1,l2,l3]:succeeds list(?l1)=>(?l1** ?l2= ?l3<=>succeeds append(?l1,?l2,?l3))).
:- definition_pred(@*, 2,all[x,y,z]:succeeds nat(?x)&succeeds nat(?y)=>(?x@* ?y= ?z<=>succeeds times(?x,?y,?z))).
:- definition_pred(@+, 2,all[x,y,z]:succeeds nat(?x)=>(?x@+ ?y= ?z<=>succeeds plus(?x,?y,?z))).
:- definition_pred(lh, 1,all[l,n]:succeeds list(?l)=>(lh(?l)= ?n<=>succeeds length(?l,?n))).
:- definition_pred(occ, 2,all[x,l,m]:succeeds list(?l)=>(occ(?x,?l)= ?m<=>succeeds occ(?x,?l,?m))).
:- definition_pred(sub, 2,all[l1,l2]:sub(?l1,?l2)<=>(all x:succeeds member(?x,?l1)=>succeeds member(?x,?l2))).


:- lemma(n_reverse:types,
all [l1,l2]: succeeds n_reverse(?l1,?l2) => succeeds list(?l1) & 
 succeeds list(?l2),
induction(
 [all [l1,l2]: succeeds n_reverse(?l1,?l2) => succeeds list(?l1) & 
   succeeds list(?l2)],
 [step([],[],[],succeeds list([]) & succeeds list([])),
  step([x,l1,l2,l3],
   [succeeds list(?l1) & succeeds list(?l3),
    succeeds n_reverse(?l1,?l3),
    succeeds append(?l3,[?x],?l2)],
   [succeeds list([?x]) by lemma(list:1),
    succeeds list(?l2) by lemma(append:types:2)],
   succeeds list([?x|?l1]) & succeeds list(?l2))])
).

:- lemma(n_reverse:termination,
all [l1,l2]: succeeds list(?l1) => terminates n_reverse(?l1,?l2),
[induction(
  [all l1: succeeds list(?l1) => (all l2: terminates n_reverse(?l1,?l2))],
  [step([],
    [],
    terminates n_reverse([],?l2) by completion,
    all l2: terminates n_reverse([],?l2)),
   step([x,l1],
    [all l2: terminates n_reverse(?l1,?l2),
     succeeds list(?l1)],
    [terminates n_reverse(?l1,?l3),
     succeeds n_reverse(?l1,?l3) \/ fails n_reverse(?l1,?l3),
     cases(succeeds n_reverse(?l1,?l3),
      [succeeds list(?l1) & succeeds list(?l3) by lemma(n_reverse:types),
       terminates append(?l3,[?x],?l2) by lemma(append:termination:1),
       terminates (n_reverse(?l1,?l3) & append(?l3,[?x],?l2))],
      fails n_reverse(?l1,?l3),
      [],
      terminates (n_reverse(?l1,?l3) & append(?l3,[?x],?l2))),
     all l3: terminates (n_reverse(?l1,?l3) & append(?l3,[?x],?l2)),
     terminates n_reverse([?x|?l1],?l2) by completion],
    all l2: terminates n_reverse([?x|?l1],?l2))]),
 assume(succeeds list(?l1),
  [all l2: terminates n_reverse(?l1,?l2),
   terminates n_reverse(?l1,?l2)],
  terminates n_reverse(?l1,?l2))]
).

:- lemma(a_reverse:types:1,
all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => succeeds list(?l1),
induction(
 [all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => succeeds list(?l1)],
 [step([0],[],[],succeeds list([])),
  step([x,l1,l2,l3],
   [succeeds list(?l1),
    succeeds a_reverse(?l1,[?x|?l2],?l3)],
   [],
   succeeds list([?x|?l1]))])
).

:- lemma(a_reverse:types:2,
all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) & succeeds list(?l2) => 
 succeeds list(?l3),
[induction(
  [all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => succeeds list(?l2) 
    => succeeds list(?l3)],
  [step([l],[],[],succeeds list(?l) => succeeds list(?l)),
   step([x,l1,l2,l3],
    [succeeds list([?x|?l2]) => succeeds list(?l3),
     succeeds a_reverse(?l1,[?x|?l2],?l3)],
    assume(succeeds list(?l2),
     [],
     succeeds list(?l3)),
    succeeds list(?l2) => succeeds list(?l3))]),
 assume(succeeds a_reverse(?l1,?l2,?l3) & succeeds list(?l2),
  [succeeds list(?l2) => succeeds list(?l3),
   succeeds list(?l3)],
  succeeds list(?l3))]
).

:- lemma(a_reverse:types:3,
all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) & succeeds list(?l3) => 
 succeeds list(?l2),
[induction(
  [all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => succeeds list(?l3) 
    => succeeds list(?l2)],
  [step([l],[],[],succeeds list(?l) => succeeds list(?l)),
   step([x,l1,l2,l3],
    [succeeds list(?l3) => succeeds list([?x|?l2]),
     succeeds a_reverse(?l1,[?x|?l2],?l3)],
    assume(succeeds list(?l3),
     [succeeds list([?x|?l2]),
      def succeeds list([?x|?l2]) by completion,
      succeeds list(?l2)],
     succeeds list(?l2)),
    succeeds list(?l3) => succeeds list(?l2))]),
 assume(succeeds a_reverse(?l1,?l2,?l3) & succeeds list(?l3),
  [succeeds list(?l3) => succeeds list(?l2),
   succeeds list(?l2)],
  succeeds list(?l2))]
).

:- lemma(a_reverse:termination,
all [l1,l2,l3]: succeeds list(?l1) => terminates a_reverse(?l1,?l2,?l3),
[induction(
  [all l1: succeeds list(?l1) => 
    (all [l2,l3]: terminates a_reverse(?l1,?l2,?l3))],
  [step([],
    [],
    terminates a_reverse([],?l2,?l3) by completion,
    all [l2,l3]: terminates a_reverse([],?l2,?l3)),
   step([x,l1],
    [all [l2,l3]: terminates a_reverse(?l1,?l2,?l3),
     succeeds list(?l1)],
    [terminates a_reverse(?l1,[?x|?l2],?l3),
     terminates a_reverse([?x|?l1],?l2,?l3) by completion],
    all [l2,l3]: terminates a_reverse([?x|?l1],?l2,?l3))]),
 assume(succeeds list(?l1),
  [all [l2,l3]: terminates a_reverse(?l1,?l2,?l3),
   terminates a_reverse(?l1,?l2,?l3)],
  terminates a_reverse(?l1,?l2,?l3))]
).

:- lemma(n_reverse:existence,
all l1: succeeds list(?l1) => (ex l2: succeeds n_reverse(?l1,?l2)),
induction(
 [all l1: succeeds list(?l1) => (ex l2: succeeds n_reverse(?l1,?l2))],
 [step([],
   [],
   [succeeds n_reverse([],[]),
    ex l2: succeeds n_reverse([],?l2)],
   ex l2: succeeds n_reverse([],?l2)),
  step([x,l1],
   [ex l2: succeeds n_reverse(?l1,?l2),
    succeeds list(?l1)],
   exist(l2,
    succeeds n_reverse(?l1,?l2),
    [succeeds list(?l1) & succeeds list(?l2) by lemma(n_reverse:types),
     succeeds append(?l2,[?x],?l2 ** [?x]) by existence(**,2),
     succeeds n_reverse([?x|?l1],?l2 ** [?x]),
     ex l2: succeeds n_reverse([?x|?l1],?l2)],
    ex l2: succeeds n_reverse([?x|?l1],?l2)),
   ex l2: succeeds n_reverse([?x|?l1],?l2))])
).

:- lemma(n_reverse:uniqueness,
all [l1,l2,l3]: succeeds n_reverse(?l1,?l2) & succeeds n_reverse(?l1,?l3) 
 => ?l2 = ?l3,
[induction(
  [all [l1,l2]: succeeds n_reverse(?l1,?l2) => 
    (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3)],
  [step([],
    [],
    assume(succeeds n_reverse([],?l3),
     [def succeeds n_reverse([],?l3) by completion,
      [] = ?l3],
     [] = ?l3),
    all l3: succeeds n_reverse([],?l3) => [] = ?l3),
   step([x,l1,l2,l4],
    [all l3: succeeds n_reverse(?l1,?l3) => ?l4 = ?l3,
     succeeds n_reverse(?l1,?l4),
     succeeds append(?l4,[?x],?l2)],
    assume(succeeds n_reverse([?x|?l1],?l3),
     [def succeeds n_reverse([?x|?l1],?l3) by completion,
      exist(l5,
       succeeds n_reverse(?l1,?l5) & succeeds append(?l5,[?x],?l3),
       [?l4 = ?l5,
        succeeds list(?l4) by lemma(append:types:1),
        succeeds list(?l5),
        ?l2 = ?l4 ** [?x] by uniqueness(**,2),
        ?l3 = ?l5 ** [?x] by uniqueness(**,2),
        ?l2 = ?l4 ** [?x] = ?l5 ** [?x] = ?l3],
       ?l2 = ?l3)],
     ?l2 = ?l3),
    all l3: succeeds n_reverse([?x|?l1],?l3) => ?l2 = ?l3)]),
 assume(succeeds n_reverse(?l1,?l2) & succeeds n_reverse(?l1,?l3),
  [all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3,
   succeeds n_reverse(?l1,?l3) => ?l2 = ?l3,
   ?l2 = ?l3],
  ?l2 = ?l3)]
).

:- theorem(n_reverse:function,
all l1: succeeds list(?l1) => 
 (ex l2: succeeds n_reverse(?l1,?l2) & 
   (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3)),
assume(succeeds list(?l1),
 [ex l2: succeeds n_reverse(?l1,?l2) by lemma(n_reverse:existence),
  exist(l2,
   succeeds n_reverse(?l1,?l2),
   [assume(succeeds n_reverse(?l1,?l3),
     ?l2 = ?l3 by lemma(n_reverse:uniqueness),
     ?l2 = ?l3),
    succeeds n_reverse(?l1,?l2) & 
    (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3),
    ex l2: succeeds n_reverse(?l1,?l2) & 
     (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3)],
   ex l2: succeeds n_reverse(?l1,?l2) & 
    (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3))],
 ex l2: succeeds n_reverse(?l1,?l2) & 
  (all l3: succeeds n_reverse(?l1,?l3) => ?l2 = ?l3))
).

:- lemma(n_reverse:ground,
all [l1,l2]: succeeds n_reverse(?l1,?l2) & gr(?l1) => gr(?l2),
[induction(
  [all [l1,l2]: succeeds n_reverse(?l1,?l2) => gr(?l1) => gr(?l2)],
  [step([],[],[],gr([]) => gr([])),
   step([x,l1,l3,l2],
    [gr(?l1) => gr(?l2),
     succeeds n_reverse(?l1,?l2),
     succeeds append(?l2,[?x],?l3)],
    assume(gr([?x|?l1]),
     [gr(?l2),
      gr([?x]),
      gr(?l3) by lemma(append:ground:1)],
     gr(?l3)),
    gr([?x|?l1]) => gr(?l3))]),
 assume(succeeds n_reverse(?l1,?l2) & gr(?l1),
  [gr(?l1) => gr(?l2),
   gr(?l1) => gr(?l2),
   gr(?l2)],
  gr(?l2))]
).

:- definition_fun(rev,1,
 all [l1,l2]: succeeds list(?l1) => 
  (rev(?l1) = ?l2 <=> succeeds n_reverse(?l1,?l2)),
 existence by lemma(n_reverse:existence),
 uniqueness by lemma(n_reverse:uniqueness)
).

:- corollary(rev:nil,
rev([]) = [],
[succeeds n_reverse([],[]),
 succeeds list([]),
 rev([]) = [] by uniqueness(rev,1)]
).

:- corollary(rev:types,
all l: succeeds list(?l) => succeeds list(rev(?l)),
assume(succeeds list(?l),
 [succeeds n_reverse(?l,rev(?l)) by existence(rev,1),
  succeeds list(?l) & succeeds list(rev(?l)) by lemma(n_reverse:types)],
 succeeds list(rev(?l)))
).

:- corollary(rev:cons,
all [x,l]: succeeds list(?l) => rev([?x|?l]) = rev(?l) ** [?x],
assume(succeeds list(?l),
 [succeeds n_reverse(?l,rev(?l)) by existence(rev,1),
  succeeds list(rev(?l)) by corollary(rev:types),
  succeeds append(rev(?l),[?x],rev(?l) ** [?x]) by existence(**,2),
  succeeds n_reverse([?x|?l],rev(?l) ** [?x]),
  succeeds list([?x|?l]),
  rev([?x|?l]) = rev(?l) ** [?x] by uniqueness(rev,1)],
 rev([?x|?l]) = rev(?l) ** [?x])
).

:- lemma(a_reverse:n_reverse,
all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => rev(?l1) ** ?l2 = ?l3,
induction(
 [all [l1,l2,l3]: succeeds a_reverse(?l1,?l2,?l3) => rev(?l1) ** ?l2 = ?l3],
 [step([l],
   [],
   [rev([]) = [] by corollary(rev:nil),
    [] ** ?l = ?l by corollary(app:nil),
    rev([]) ** ?l = [] ** ?l = ?l],
   rev([]) ** ?l = ?l),
  step([x,l1,l2,l3],
   [rev(?l1) ** [?x|?l2] = ?l3,
    succeeds a_reverse(?l1,[?x|?l2],?l3)],
   [[?x|?l2] = [?x] ** ?l2 by concatenation,
    succeeds list(?l1) by lemma(a_reverse:types:1),
    succeeds list(rev(?l1)) by corollary(rev:types),
    succeeds list([?x]) by lemma(list:1),
    rev(?l1) ** [?x] ** ?l2 = rev(?l1) ** ([?x] ** ?l2) by theorem(app:associative),
    rev([?x|?l1]) = rev(?l1) ** [?x] by corollary(rev:cons),
    rev([?x|?l1]) ** ?l2 = rev(?l1) ** [?x] ** ?l2 = rev(?l1) ** 
    ([?x] ** ?l2) = rev(?l1) ** [?x|?l2] = ?l3],
   rev([?x|?l1]) ** ?l2 = ?l3)])
).

:- lemma(n_reverse:a_reverse,
all [l1,l2]: succeeds n_reverse(?l1,?l2) => 
 (all l3: succeeds a_reverse(?l1,?l3,?l2 ** ?l3)),
induction(
 [all [l1,l2]: succeeds n_reverse(?l1,?l2) => 
   (all l3: succeeds a_reverse(?l1,?l3,?l2 ** ?l3))],
 [step([],
   [],
   [succeeds a_reverse([],?l3,?l3),
    [] ** ?l3 = ?l3 by corollary(app:nil),
    succeeds a_reverse([],?l3,[] ** ?l3)],
   all l3: succeeds a_reverse([],?l3,[] ** ?l3)),
  step([x,l1,l2,l4],
   [all l3: succeeds a_reverse(?l1,?l3,?l4 ** ?l3),
    succeeds n_reverse(?l1,?l4),
    succeeds append(?l4,[?x],?l2)],
   [succeeds a_reverse(?l1,[?x|?l3],?l4 ** [?x|?l3]),
    succeeds a_reverse([?x|?l1],?l3,?l4 ** [?x|?l3]),
    succeeds list(?l4) by lemma(append:types:1),
    ?l4 ** [?x] = ?l2 by uniqueness(**,2),
    [?x|?l3] = [?x] ** ?l3 by concatenation,
    succeeds list([?x]) by lemma(list:1),
    ?l4 ** [?x] ** ?l3 = ?l4 ** ([?x] ** ?l3) by theorem(app:associative),
    ?l4 ** [?x|?l3] = ?l4 ** ([?x] ** ?l3) = ?l4 ** [?x] ** ?l3 = ?l2 ** 
    ?l3,
    succeeds a_reverse([?x|?l1],?l3,?l2 ** ?l3)],
   all l3: succeeds a_reverse([?x|?l1],?l3,?l2 ** ?l3))])
).

:- theorem(reverse:success,
all [l1,l2]: succeeds reverse(?l1,?l2) <=> succeeds n_reverse(?l1,?l2),
[assume(succeeds reverse(?l1,?l2),
  [def succeeds reverse(?l1,?l2) by completion,
   succeeds a_reverse(?l1,[],?l2),
   rev(?l1) ** [] = ?l2 by lemma(a_reverse:n_reverse),
   succeeds list(?l1) by lemma(a_reverse:types:1),
   succeeds list(rev(?l1)) by corollary(rev:types),
   rev(?l1) ** [] = rev(?l1) by lemma(app:nil),
   rev(?l1) = rev(?l1) ** [] = ?l2,
   succeeds n_reverse(?l1,rev(?l1)) by existence(rev,1),
   succeeds n_reverse(?l1,?l2)],
  succeeds n_reverse(?l1,?l2)),
 assume(succeeds n_reverse(?l1,?l2),
  [all l3: succeeds a_reverse(?l1,?l3,?l2 ** ?l3) by lemma(n_reverse:a_reverse),
   succeeds a_reverse(?l1,[],?l2 ** []),
   succeeds list(?l1) & succeeds list(?l2) by lemma(n_reverse:types),
   ?l2 ** [] = ?l2 by lemma(app:nil),
   succeeds a_reverse(?l1,[],?l2),
   succeeds reverse(?l1,?l2)],
  succeeds reverse(?l1,?l2)),
 succeeds reverse(?l1,?l2) <=> succeeds n_reverse(?l1,?l2)]
).

:- corollary(reverse:termination,
all [l1,l2]: succeeds list(?l1) => terminates reverse(?l1,?l2),
assume(succeeds list(?l1),
 [terminates a_reverse(?l1,[],?l2) by lemma(a_reverse:termination),
  terminates reverse(?l1,?l2) by completion],
 terminates reverse(?l1,?l2))
).

:- theorem(reverse:failure,
all [l1,l2]: succeeds list(?l1) => 
 (fails reverse(?l1,?l2) <=> fails n_reverse(?l1,?l2)),
assume(succeeds list(?l1),
 [assume(fails reverse(?l1,?l2),
   [terminates n_reverse(?l1,?l2) by lemma(n_reverse:termination),
    succeeds n_reverse(?l1,?l2) \/ fails n_reverse(?l1,?l2),
    cases(succeeds n_reverse(?l1,?l2),
     [succeeds reverse(?l1,?l2) <=> succeeds n_reverse(?l1,?l2) by theorem(reverse:success),
      succeeds reverse(?l1,?l2),
      ff],
     fails n_reverse(?l1,?l2),
     [],
     fails n_reverse(?l1,?l2))],
   fails n_reverse(?l1,?l2)),
  assume(fails n_reverse(?l1,?l2),
   [terminates reverse(?l1,?l2) by corollary(reverse:termination),
    succeeds reverse(?l1,?l2) \/ fails reverse(?l1,?l2),
    cases(succeeds reverse(?l1,?l2),
     [succeeds reverse(?l1,?l2) <=> succeeds n_reverse(?l1,?l2) by theorem(reverse:success),
      succeeds n_reverse(?l1,?l2),
      ff],
     fails reverse(?l1,?l2),
     [],
     fails reverse(?l1,?l2))],
   fails reverse(?l1,?l2))],
 fails reverse(?l1,?l2) <=> fails n_reverse(?l1,?l2))
).

:- corollary(rev:1,
all x: rev([?x]) = [?x],
[rev([?x]) = rev([]) ** [?x] by corollary(rev:cons),
 rev([]) = [] by corollary(rev:nil),
 [] ** [?x] = [?x] by corollary(app:nil),
 rev([?x]) = rev([]) ** [?x] = [] ** [?x] = [?x],
 rev([?x]) = [?x]]
).

:- corollary(rev:2,
all [x,y]: rev([?x,?y]) = [?y,?x],
[succeeds list([?y]) by lemma(list:1),
 rev([?x,?y]) = rev([?y]) ** [?x] by corollary(rev:cons),
 rev([?y]) = [?y] by corollary(rev:1),
 [?y,?x] = [?y] ** [?x] by concatenation,
 rev([?x,?y]) = rev([?y]) ** [?x] = [?y] ** [?x] = [?y,?x],
 rev([?x,?y]) = [?y,?x]]
).

:- corollary(rev:3,
all [x,y,z]: rev([?x,?y,?z]) = [?z,?y,?x],
[succeeds list([?y,?z]) by lemma(list:2),
 rev([?x,?y,?z]) = rev([?y,?z]) ** [?x] by corollary(rev:cons),
 rev([?y,?z]) = [?z,?y] by corollary(rev:2),
 succeeds list([?y]) by lemma(list:1),
 [?z,?y] ** [?x] = [?z,?y,?x] by concatenation,
 rev([?x,?y,?z]) = rev([?y,?z]) ** [?x] = [?z,?y] ** [?x] = [?z,?y,?x],
 rev([?x,?y,?z]) = [?z,?y,?x]]
).

:- lemma(rev:app,
all [l,y]: succeeds list(?l) => rev(?l ** [?y]) = [?y|rev(?l)],
[induction(
  [all l: succeeds list(?l) => (all y: rev(?l ** [?y]) = [?y|rev(?l)])],
  [step([],
    [],
    [[] ** [?y] = [?y] by corollary(app:nil),
     rev([?y]) = [?y] by corollary(rev:1),
     rev([]) = [] by corollary(rev:nil),
     rev([] ** [?y]) = rev([?y]) = [?y] = [?y|rev([])],
     rev([] ** [?y]) = [?y|rev([])]],
    all y: rev([] ** [?y]) = [?y|rev([])]),
   step([x,l],
    [all y: rev(?l ** [?y]) = [?y|rev(?l)],
     succeeds list(?l)],
    [[?x|?l] ** [?y] = [?x|?l ** [?y]] by corollary(app:cons),
     succeeds list([?y]) by lemma(list:1),
     succeeds list(?l ** [?y]) by corollary(app:types:1),
     rev([?x|?l ** [?y]]) = rev(?l ** [?y]) ** [?x] by 
      corollary(rev:cons),
     rev(?l ** [?y]) = [?y|rev(?l)],
     succeeds list(rev(?l)) by corollary(rev:types),
     [?y|rev(?l)] ** [?x] = [?y|rev(?l) ** [?x]] by corollary(app:cons),
     rev([?x|?l]) = rev(?l) ** [?x] by corollary(rev:cons),
     rev([?x|?l] ** [?y]) = rev([?x|?l ** [?y]]) = rev(?l ** [?y]) ** [?x] 
     = [?y|rev(?l)] ** [?x] = [?y|rev(?l) ** [?x]] = [?y|rev([?x|?l])],
     rev([?x|?l] ** [?y]) = [?y|rev([?x|?l])]],
    all y: rev([?x|?l] ** [?y]) = [?y|rev([?x|?l])])]),
 assume(succeeds list(?l),
  [all y: rev(?l ** [?y]) = [?y|rev(?l)],
   rev(?l ** [?y]) = [?y|rev(?l)]],
  rev(?l ** [?y]) = [?y|rev(?l)])]
).

:- theorem(rev:involution,
all l: succeeds list(?l) => rev(rev(?l)) = ?l,
induction([all l: succeeds list(?l) => rev(rev(?l)) = ?l],
 [step([],
   [],
   [rev([]) = [] by corollary(rev:nil),
    rev(rev([])) = rev([]) = []],
   rev(rev([])) = []),
  step([x,l],
   [rev(rev(?l)) = ?l,
    succeeds list(?l)],
   [rev([?x|?l]) = rev(?l) ** [?x] by corollary(rev:cons),
    succeeds list(rev(?l)) by corollary(rev:types),
    rev(rev(?l) ** [?x]) = [?x|rev(rev(?l))] by lemma(rev:app),
    rev(rev([?x|?l])) = rev(rev(?l) ** [?x]) = [?x|rev(rev(?l))] = [?x|?l]],
   rev(rev([?x|?l])) = [?x|?l])])
).

:- theorem(n_reverse:involution,
all [l1,l2]: succeeds n_reverse(?l1,?l2) => succeeds n_reverse(?l2,?l1),
assume(succeeds n_reverse(?l1,?l2),
 [succeeds list(?l1) & succeeds list(?l2) by lemma(n_reverse:types),
  rev(?l1) = ?l2 by uniqueness(rev,1),
  rev(rev(?l1)) = ?l1 by theorem(rev:involution),
  rev(?l2) = rev(rev(?l1)) = ?l1,
  succeeds n_reverse(?l2,rev(?l2)) by existence(rev,1),
  succeeds n_reverse(?l2,?l1)],
 succeeds n_reverse(?l2,?l1))
).

:- theorem(rev:permutation,
all l: succeeds list(?l) => succeeds permutation(?l,rev(?l)),
induction([all l: succeeds list(?l) => succeeds permutation(?l,rev(?l))],
 [step([],
   [],
   [rev([]) = [] by corollary(rev:nil),
    succeeds permutation([],[]),
    succeeds permutation([],rev([]))],
   succeeds permutation([],rev([]))),
  step([x,l],
   [succeeds permutation(?l,rev(?l)),
    succeeds list(?l)],
   [rev([?x|?l]) = rev(?l) ** [?x] by corollary(rev:cons),
    succeeds list(rev(?l)) by corollary(rev:types),
    succeeds delete(?x,rev(?l) ** [?x],rev(?l) ** []) by theorem(delete:app:1),
    rev(?l) ** [] = rev(?l) by lemma(app:nil),
    succeeds delete(?x,rev(?l) ** [?x],rev(?l)),
    succeeds permutation(rev(?l),?l) by theorem(permutation:symmetric),
    succeeds permutation(rev(?l) ** [?x],[?x|?l]),
    succeeds permutation(rev([?x|?l]),[?x|?l]),
    succeeds permutation([?x|?l],rev([?x|?l])) by theorem(permutation:symmetric)],
   succeeds permutation([?x|?l],rev([?x|?l])))])
).

:- bye(reverse).
